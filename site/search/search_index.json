{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem vindo(a) ao relat\u00f3rio t\u00e9cnico sobre a biblioteca JavaScript jQuery! Esta documenta\u00e7\u00e3o fornece uma vis\u00e3o geral do jQuery, incluindo seus recursos, uso e t\u00f3picos avan\u00e7ados. Conte\u00fado Introdu\u00e7\u00e3o Caracter\u00edsticas Utiliza\u00e7\u00e3o T\u00f3picos Avan\u00e7ados Refer\u00eancias","title":"\u00cdndice"},{"location":"#bem-vindoa-ao-relatorio-tecnico-sobre-a-biblioteca-javascript-jquery","text":"Esta documenta\u00e7\u00e3o fornece uma vis\u00e3o geral do jQuery, incluindo seus recursos, uso e t\u00f3picos avan\u00e7ados.","title":"Bem vindo(a) ao relat\u00f3rio t\u00e9cnico sobre a biblioteca JavaScript jQuery!"},{"location":"#conteudo","text":"Introdu\u00e7\u00e3o Caracter\u00edsticas Utiliza\u00e7\u00e3o T\u00f3picos Avan\u00e7ados Refer\u00eancias","title":"Conte\u00fado"},{"location":"advanced/","text":"T\u00f3picos Avan\u00e7ados sobre o JQuery Plugins O jQuery oferece suporte a plug-ins que adicionam novos m\u00e9todos e funcionalidades. Saiba como criar seu pr\u00f3prio plug-in ou usar os existentes. Exemplo simples de cria\u00e7\u00e3o de um plugin O plugin mudaCor permite aplicar estilos personalizados a elementos HTML selecionados. Especificamente, ele altera a cor do texto e o tamanho da fonte dos elementos. Aqui est\u00e1 um resumo das suas funcionalidades: Defini\u00e7\u00e3o do Plugin: O plugin \u00e9 definido como uma fun\u00e7\u00e3o que \u00e9 anexada ao objeto jQuery atrav\u00e9s do $.fn. Isso permite que ele seja chamado em qualquer sele\u00e7\u00e3o de elementos jQuery. (function($) { $.fn.mudaCor = function(options) { var settings = $.extend({ cor: 'red', tamanho: '14px' }, options); return this.each(function() { $(this).css({ color: settings.cor, fontSize: settings.tamanho }); }); }; })(jQuery); Op\u00e7\u00f5es: cor: Define a cor do texto dos elementos. O valor padr\u00e3o \u00e9 'red'. tamanho: Define o tamanho da fonte dos elementos. O valor padr\u00e3o \u00e9 '14px'. O m\u00e9todo $.extend \u00e9 usado para combinar as op\u00e7\u00f5es padr\u00e3o com as op\u00e7\u00f5es fornecidas pelo usu\u00e1rio quando o plugin \u00e9 chamado. Aplica\u00e7\u00e3o do Estilo: O plugin aplica o estilo usando o m\u00e9todo .css() do jQuery. Ele altera a cor e o tamanho da fonte dos elementos selecionados com base nas op\u00e7\u00f5es fornecidas. Exemplo de Uso: mudaCor$('#elemento').mudaCor({ cor: 'blue', tamanho: '18px' }); No exemplo acima, o plugin \u00e9 chamado no elemento com o ID #elemento, alterando a cor do texto para azul e o tamanho da fonte para 18 pixels. Exemplos de Utiliza\u00e7\u00e3o de Plugins prontos Slider com jQuery vs JavaScript Puro jQuery: $(\"#slider\").slider({ min: 0, max: 100, slide: function(event, ui) { console.log(ui.value); } }); JavaScript Puro: const slider = document.getElementById('slider'); slider.addEventListener('input', (event) => { console.log(event.target.value); }); Carrosel com jQuery vs JavaScript Puro jQuery: $('.carousel').carousel({ interval: 2000, wrap: true }); JavaScript Puro: let currentIndex = 0; const items = document.querySelectorAll('.carousel .item'); function showItem(index) { items.forEach((item, i) => { item.style.display = i === index ? 'block' : 'none'; }); } setInterval(() => { currentIndex = (currentIndex + 1) % items.length; showItem(currentIndex); }, 2000); Valida\u00e7\u00e3o de formul\u00e1rio com jQuery vs JavaScript Puro jQuery: $(\"#formulario\").validate({ rules: { username: \"required\", email: { required: true, email: true } }, messages: { username: \"Digite seu nome\", email: \"Digite um email v\u00e1lido\" } }); JavaScript Puro: const form = document.getElementById('myForm'); form.addEventListener('submit', (event) => { const username = document.getElementById('username'); const email = document.getElementById('email'); if (!username.value) { alert('Digite seu nome'); event.preventDefault(); } else if (!email.value || !/\\S+@\\S+\\.\\S+/.test(email.value)) { alert('Digite um email v\u00e1lido'); event.preventDefault(); } }); Otimiza\u00e7\u00e3o de performance As t\u00e9cnicas para otimizar o desempenho do jQuery incluem minimizar as manipula\u00e7\u00f5es do DOM e usar a delega\u00e7\u00e3o de eventos, veja alguns exemplos: Manipula\u00e7\u00e3o de DOM em Massa Para otimizar a manipula\u00e7\u00e3o do DOM, especialmente ao adicionar muitos elementos, \u00e9 recomend\u00e1vel usar document.createDocumentFragment() para evitar m\u00faltiplas re-renderiza\u00e7\u00f5es do DOM. Exemplo: var fragment = $(document.createDocumentFragment()); for (var i = 0; i < 100; i++) { fragment.append('<div>Item ' + i + '</div>'); } $('#container').append(fragment); Delega\u00e7\u00e3o de Eventos Ao inv\u00e9s de adicionar ouvintes de eventos diretamente a muitos elementos filhos, use a delega\u00e7\u00e3o de eventos com on() para melhorar a performance. Exemplo: $('#parent').on('click', '.child', function() { alert('clicou no child!'); }); Boas pr\u00e1ticas no uso do jQuery Seguir boas pr\u00e1ticas de programa\u00e7\u00e3o com jQuery n\u00e3o apenas melhora a performance e a legibilidade do c\u00f3digo, mas tamb\u00e9m facilita a manuten\u00e7\u00e3o e a escalabilidade da sua aplica\u00e7\u00e3o. Criar seus pr\u00f3prios scripts e plugins permite que voc\u00ea adicione funcionalidades personalizadas de forma organizada e reutiliz\u00e1vel. Minimizar Manipula\u00e7\u00f5es do DOM: Evite fazer altera\u00e7\u00f5es frequentes no DOM diretamente; ao inv\u00e9s disso, fa\u00e7a todas as altera\u00e7\u00f5es de uma vez. Delega\u00e7\u00e3o de Eventos: Utilize a delega\u00e7\u00e3o de eventos para melhorar a performance, especialmente em elementos que s\u00e3o adicionados dinamicamente. Cache de Seletor: Armazene em cache os seletores jQuery que s\u00e3o usados frequentemente para evitar buscas repetidas. Uso de Plugins: Utilize plugins validados e bem mantidos para garantir compatibilidade e performance.","title":"T\u00f3picos Avan\u00e7ados"},{"location":"advanced/#topicos-avancados-sobre-o-jquery","text":"","title":"T\u00f3picos Avan\u00e7ados sobre o JQuery"},{"location":"advanced/#plugins","text":"O jQuery oferece suporte a plug-ins que adicionam novos m\u00e9todos e funcionalidades. Saiba como criar seu pr\u00f3prio plug-in ou usar os existentes.","title":"Plugins"},{"location":"advanced/#exemplo-simples-de-criacao-de-um-plugin","text":"O plugin mudaCor permite aplicar estilos personalizados a elementos HTML selecionados. Especificamente, ele altera a cor do texto e o tamanho da fonte dos elementos. Aqui est\u00e1 um resumo das suas funcionalidades: Defini\u00e7\u00e3o do Plugin: O plugin \u00e9 definido como uma fun\u00e7\u00e3o que \u00e9 anexada ao objeto jQuery atrav\u00e9s do $.fn. Isso permite que ele seja chamado em qualquer sele\u00e7\u00e3o de elementos jQuery. (function($) { $.fn.mudaCor = function(options) { var settings = $.extend({ cor: 'red', tamanho: '14px' }, options); return this.each(function() { $(this).css({ color: settings.cor, fontSize: settings.tamanho }); }); }; })(jQuery); Op\u00e7\u00f5es: cor: Define a cor do texto dos elementos. O valor padr\u00e3o \u00e9 'red'. tamanho: Define o tamanho da fonte dos elementos. O valor padr\u00e3o \u00e9 '14px'. O m\u00e9todo $.extend \u00e9 usado para combinar as op\u00e7\u00f5es padr\u00e3o com as op\u00e7\u00f5es fornecidas pelo usu\u00e1rio quando o plugin \u00e9 chamado. Aplica\u00e7\u00e3o do Estilo: O plugin aplica o estilo usando o m\u00e9todo .css() do jQuery. Ele altera a cor e o tamanho da fonte dos elementos selecionados com base nas op\u00e7\u00f5es fornecidas. Exemplo de Uso: mudaCor$('#elemento').mudaCor({ cor: 'blue', tamanho: '18px' }); No exemplo acima, o plugin \u00e9 chamado no elemento com o ID #elemento, alterando a cor do texto para azul e o tamanho da fonte para 18 pixels.","title":"Exemplo simples de cria\u00e7\u00e3o de um plugin"},{"location":"advanced/#exemplos-de-utilizacao-de-plugins-prontos","text":"","title":"Exemplos de Utiliza\u00e7\u00e3o de Plugins prontos"},{"location":"advanced/#slider-com-jquery-vs-javascript-puro","text":"jQuery: $(\"#slider\").slider({ min: 0, max: 100, slide: function(event, ui) { console.log(ui.value); } }); JavaScript Puro: const slider = document.getElementById('slider'); slider.addEventListener('input', (event) => { console.log(event.target.value); });","title":"Slider com jQuery vs JavaScript Puro"},{"location":"advanced/#carrosel-com-jquery-vs-javascript-puro","text":"jQuery: $('.carousel').carousel({ interval: 2000, wrap: true }); JavaScript Puro: let currentIndex = 0; const items = document.querySelectorAll('.carousel .item'); function showItem(index) { items.forEach((item, i) => { item.style.display = i === index ? 'block' : 'none'; }); } setInterval(() => { currentIndex = (currentIndex + 1) % items.length; showItem(currentIndex); }, 2000);","title":"Carrosel com jQuery vs JavaScript Puro"},{"location":"advanced/#validacao-de-formulario-com-jquery-vs-javascript-puro","text":"jQuery: $(\"#formulario\").validate({ rules: { username: \"required\", email: { required: true, email: true } }, messages: { username: \"Digite seu nome\", email: \"Digite um email v\u00e1lido\" } }); JavaScript Puro: const form = document.getElementById('myForm'); form.addEventListener('submit', (event) => { const username = document.getElementById('username'); const email = document.getElementById('email'); if (!username.value) { alert('Digite seu nome'); event.preventDefault(); } else if (!email.value || !/\\S+@\\S+\\.\\S+/.test(email.value)) { alert('Digite um email v\u00e1lido'); event.preventDefault(); } });","title":"Valida\u00e7\u00e3o de formul\u00e1rio com jQuery vs JavaScript Puro"},{"location":"advanced/#otimizacao-de-performance","text":"As t\u00e9cnicas para otimizar o desempenho do jQuery incluem minimizar as manipula\u00e7\u00f5es do DOM e usar a delega\u00e7\u00e3o de eventos, veja alguns exemplos:","title":"Otimiza\u00e7\u00e3o de performance"},{"location":"advanced/#manipulacao-de-dom-em-massa","text":"Para otimizar a manipula\u00e7\u00e3o do DOM, especialmente ao adicionar muitos elementos, \u00e9 recomend\u00e1vel usar document.createDocumentFragment() para evitar m\u00faltiplas re-renderiza\u00e7\u00f5es do DOM. Exemplo: var fragment = $(document.createDocumentFragment()); for (var i = 0; i < 100; i++) { fragment.append('<div>Item ' + i + '</div>'); } $('#container').append(fragment);","title":"Manipula\u00e7\u00e3o de DOM em Massa"},{"location":"advanced/#delegacao-de-eventos","text":"Ao inv\u00e9s de adicionar ouvintes de eventos diretamente a muitos elementos filhos, use a delega\u00e7\u00e3o de eventos com on() para melhorar a performance. Exemplo: $('#parent').on('click', '.child', function() { alert('clicou no child!'); });","title":"Delega\u00e7\u00e3o de Eventos"},{"location":"advanced/#boas-praticas-no-uso-do-jquery","text":"Seguir boas pr\u00e1ticas de programa\u00e7\u00e3o com jQuery n\u00e3o apenas melhora a performance e a legibilidade do c\u00f3digo, mas tamb\u00e9m facilita a manuten\u00e7\u00e3o e a escalabilidade da sua aplica\u00e7\u00e3o. Criar seus pr\u00f3prios scripts e plugins permite que voc\u00ea adicione funcionalidades personalizadas de forma organizada e reutiliz\u00e1vel. Minimizar Manipula\u00e7\u00f5es do DOM: Evite fazer altera\u00e7\u00f5es frequentes no DOM diretamente; ao inv\u00e9s disso, fa\u00e7a todas as altera\u00e7\u00f5es de uma vez. Delega\u00e7\u00e3o de Eventos: Utilize a delega\u00e7\u00e3o de eventos para melhorar a performance, especialmente em elementos que s\u00e3o adicionados dinamicamente. Cache de Seletor: Armazene em cache os seletores jQuery que s\u00e3o usados frequentemente para evitar buscas repetidas. Uso de Plugins: Utilize plugins validados e bem mantidos para garantir compatibilidade e performance.","title":"Boas pr\u00e1ticas no uso do jQuery"},{"location":"features/","text":"Caracter\u00edsticas do jQuery com exemplos Manipula\u00e7\u00e3o do DOM: Simplifica o processo de percorrer e manipular o DOM. <script> $('#mudar-texto').click(function() { $('#content').text('Texto alterado').addClass('novo-estilo'); }); </script> No exemplo acima: Estamos alterando o conte\u00fado de um elemento e adicionamos uma nova classe. Encontra-se o elemento com o ID content e altera seu texto. O m\u00e9todo \".addClass()\" Adiciona uma nova classe \"novo-estilo\" ao elemento. Tratamento de eventos: Oferece uma maneira unificada de tratar eventos em diferentes navegadores. <script> $('#botao-alerta').click(function() { alert('Clicou!'); }); </script> No exemplo acima: Estamos capturando o clique em um bot\u00e3o e exibimos um alerta. O m\u00e9todo \".click(function() {...})\" Define um manipulador de eventos que ser\u00e1 executado quando o bot\u00e3o for clicado. Essa abordagem funciona consistentemente em todos os navegadores. AJAX: Simplifica a realiza\u00e7\u00e3o de solicita\u00e7\u00f5es HTTP ass\u00edncronas. <script> $('#carregar-dados').click(function() { $.ajax({ url: 'dados.txt', success: function(dados) { $('#resultado').html(dados); } }); }); </script> No exemplo acima: Estamos carregando conte\u00fado de um arquivo externo e o inserimos em um elemento da p\u00e1gina. O m\u00e9todo \"$.ajax({...})\" realiza uma solicita\u00e7\u00e3o HTTP ass\u00edncrona. Precisamos informar o caminho para o arquivo ou recurso a ser consumido na vari\u00e1vel \"url\". Fun\u00e7\u00e3o de callnack \"success:\" \u00e9 chamada quando a solicita\u00e7\u00e3o \u00e9 bem-sucedida, inserindo os dados no elemento #resultado. Animation: Oferece m\u00e9todos para animar propriedades javascript. <script> $('#liga-desliga-animacao').click(function() { $('#box').slideToggle(); }); </script> No exemplo acima: Estamos deslizando um elemento para dentro e para fora da vis\u00e3o O m\u00e9todo \".slideToggle()\" anima a altura de um elemento, deslizando-o para dentro e para fora da vis\u00e3o de forma suave. Para obter uma lista completa dos recursos, consulte: official documentation .","title":"Caracter\u00edsticas"},{"location":"features/#caracteristicas-do-jquery-com-exemplos","text":"Manipula\u00e7\u00e3o do DOM: Simplifica o processo de percorrer e manipular o DOM. <script> $('#mudar-texto').click(function() { $('#content').text('Texto alterado').addClass('novo-estilo'); }); </script> No exemplo acima: Estamos alterando o conte\u00fado de um elemento e adicionamos uma nova classe. Encontra-se o elemento com o ID content e altera seu texto. O m\u00e9todo \".addClass()\" Adiciona uma nova classe \"novo-estilo\" ao elemento. Tratamento de eventos: Oferece uma maneira unificada de tratar eventos em diferentes navegadores. <script> $('#botao-alerta').click(function() { alert('Clicou!'); }); </script> No exemplo acima: Estamos capturando o clique em um bot\u00e3o e exibimos um alerta. O m\u00e9todo \".click(function() {...})\" Define um manipulador de eventos que ser\u00e1 executado quando o bot\u00e3o for clicado. Essa abordagem funciona consistentemente em todos os navegadores. AJAX: Simplifica a realiza\u00e7\u00e3o de solicita\u00e7\u00f5es HTTP ass\u00edncronas. <script> $('#carregar-dados').click(function() { $.ajax({ url: 'dados.txt', success: function(dados) { $('#resultado').html(dados); } }); }); </script> No exemplo acima: Estamos carregando conte\u00fado de um arquivo externo e o inserimos em um elemento da p\u00e1gina. O m\u00e9todo \"$.ajax({...})\" realiza uma solicita\u00e7\u00e3o HTTP ass\u00edncrona. Precisamos informar o caminho para o arquivo ou recurso a ser consumido na vari\u00e1vel \"url\". Fun\u00e7\u00e3o de callnack \"success:\" \u00e9 chamada quando a solicita\u00e7\u00e3o \u00e9 bem-sucedida, inserindo os dados no elemento #resultado. Animation: Oferece m\u00e9todos para animar propriedades javascript. <script> $('#liga-desliga-animacao').click(function() { $('#box').slideToggle(); }); </script> No exemplo acima: Estamos deslizando um elemento para dentro e para fora da vis\u00e3o O m\u00e9todo \".slideToggle()\" anima a altura de um elemento, deslizando-o para dentro e para fora da vis\u00e3o de forma suave. Para obter uma lista completa dos recursos, consulte: official documentation .","title":"Caracter\u00edsticas do jQuery com exemplos"},{"location":"introduction/","text":"Introdu\u00e7\u00e3o ao jQuery Criado com o objetivo de simplificar a manipula\u00e7\u00e3o do DOM, eventos, anima\u00e7\u00f5es e intera\u00e7\u00f5es AJAX, o jQuery rapidamente se tornou popular por sua capacidade de resolver problemas comuns de compatibilidade entre navegadores. Com o lema \"Escreva menos, fa\u00e7a mais\", a biblioteca tornou o desenvolvimento web mais acess\u00edvel e eficiente. Breve Hist\u00f3ria O jQuery \u00e9 uma biblioteca JavaScript que foi lan\u00e7ada em 2006 por John Resig. Durante os anos 2000 e in\u00edcio de 2010, jQuery foi a biblioteca mais utilizada na web, sendo a base para muitos plugins e ferramentas. Embora frameworks modernos tenham surgido, o jQuery ainda \u00e9 amplamente utilizado em projetos legados e novos que precisam de uma solu\u00e7\u00e3o leve e f\u00e1cil de implementar.","title":"Introdu\u00e7\u00e3o"},{"location":"introduction/#introducao-ao-jquery","text":"Criado com o objetivo de simplificar a manipula\u00e7\u00e3o do DOM, eventos, anima\u00e7\u00f5es e intera\u00e7\u00f5es AJAX, o jQuery rapidamente se tornou popular por sua capacidade de resolver problemas comuns de compatibilidade entre navegadores. Com o lema \"Escreva menos, fa\u00e7a mais\", a biblioteca tornou o desenvolvimento web mais acess\u00edvel e eficiente.","title":"Introdu\u00e7\u00e3o ao jQuery"},{"location":"introduction/#breve-historia","text":"O jQuery \u00e9 uma biblioteca JavaScript que foi lan\u00e7ada em 2006 por John Resig. Durante os anos 2000 e in\u00edcio de 2010, jQuery foi a biblioteca mais utilizada na web, sendo a base para muitos plugins e ferramentas. Embora frameworks modernos tenham surgido, o jQuery ainda \u00e9 amplamente utilizado em projetos legados e novos que precisam de uma solu\u00e7\u00e3o leve e f\u00e1cil de implementar.","title":"Breve Hist\u00f3ria"},{"location":"references/","text":"Refer\u00eancias Site oficial do JQuery Documenta\u00e7\u00e3o da API Centro de aprendizado do jQuery Plugins do jQuery Plugins utilizados nos exemplos Slider Plugin : Slick Slider Form Validation Plugin : jQuery Validation Plugin Carousel Plugin : Owl Carousel Para mais informa\u00e7\u00f5es sobre os plugins e outros recursos do jQuery, consulte a documenta\u00e7\u00e3o oficial e o Centro de aprendizado do jQuery .","title":"Refer\u00eancias"},{"location":"references/#referencias","text":"Site oficial do JQuery Documenta\u00e7\u00e3o da API Centro de aprendizado do jQuery Plugins do jQuery","title":"Refer\u00eancias"},{"location":"references/#plugins-utilizados-nos-exemplos","text":"Slider Plugin : Slick Slider Form Validation Plugin : jQuery Validation Plugin Carousel Plugin : Owl Carousel Para mais informa\u00e7\u00f5es sobre os plugins e outros recursos do jQuery, consulte a documenta\u00e7\u00e3o oficial e o Centro de aprendizado do jQuery .","title":"Plugins utilizados nos exemplos"},{"location":"usage/","text":"Usando o jQuery Integrando o jQuery no Projeto Adicionar o jQuery ao seu projeto \u00e9 simples. Voc\u00ea pode optar por incluir o jQuery diretamente de uma CDN (Content Delivery Network) ou baixar o arquivo e hosped\u00e1-lo localmente. Usando uma CDN: Hospedando localmente: Baixe o arquivo jQuery de jquery.com. Inclua o arquivo no seu projeto: Agora, voc\u00ea pode usar o jQuery em seus scripts.","title":"Utiliza\u00e7\u00e3o"},{"location":"usage/#usando-o-jquery","text":"","title":"Usando o jQuery"},{"location":"usage/#integrando-o-jquery-no-projeto","text":"Adicionar o jQuery ao seu projeto \u00e9 simples. Voc\u00ea pode optar por incluir o jQuery diretamente de uma CDN (Content Delivery Network) ou baixar o arquivo e hosped\u00e1-lo localmente. Usando uma CDN: Hospedando localmente: Baixe o arquivo jQuery de jquery.com. Inclua o arquivo no seu projeto: Agora, voc\u00ea pode usar o jQuery em seus scripts.","title":"Integrando o jQuery no Projeto"}]}